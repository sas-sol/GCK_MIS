
<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.13.5/xlsx.full.min.js"></script>
<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.13.5/jszip.js"></script>
<script>
    var AllData;
    var ExcelToJSON = function () {
        this.parseExcel = function (file) {
            var reader = new FileReader();
            reader.onload = function (e) {
                var data = e.target.result;
                var workbook = XLSX.read(data, {
                    type: 'binary'
                });
                workbook.SheetNames.forEach(function (sheetName) {
                    var XL_row_object = XLSX.utils.sheet_to_row_object_array(workbook.Sheets[sheetName]);
                    //AllData = JSON.stringify(XL_row_object);
                    AllData = XL_row_object;
                })
            };
            reader.onerror = function (ex) {
                console.log(ex);
            };
            reader.readAsBinaryString(file);
        };
    };
    function handleFileSelect(evt) {
        var xl2json = new ExcelToJSON();
        xl2json.parseExcel(fileUpload.files[0]);
    }
    function Upload() {

        //Reference the FileUpload element.
        var fileUpload = document.getElementById("fileUpload");
        handleFileSelect(fileUpload);
        //Validate whether File is valid Excel file.
        var regex = /^([a-zA-Z0-9\s_\\.\-:])+(.xls|.xlsx)$/;
        if (regex.test(fileUpload.value.toLowerCase())) {
            if (typeof (FileReader) != "undefined") {
                var reader = new FileReader();

                //For Browsers other than IE.
                if (reader.readAsBinaryString) {
                    reader.onload = function (e) {
                        ProcessExcel(e.target.result);
                    };
                    reader.readAsBinaryString(fileUpload.files[0]);
                } else {
                    //For IE Browser.
                    reader.onload = function (e) {
                        var data = "";
                        var bytes = new Uint8Array(e.target.result);
                        for (var i = 0; i < bytes.byteLength; i++) {
                            data += String.fromCharCode(bytes[i]);
                        }
                        ProcessExcel(data);
                    };
                    reader.readAsArrayBuffer(fileUpload.files[0]);
                }
            } else {
                alert("This browser does not support HTML5.");
            }
        } else {
            alert("Please upload a valid Excel file.");
        }
    };
    function ProcessExcel(data) {
        //Read the Excel File data.
        var workbook = XLSX.read(data, {
            type: 'binary'
        });

        //Fetch the name of First Sheet.
        var firstSheet = workbook.SheetNames[0];

        //Read all rows from First Sheet into an JSON array.
        var excelRows = XLSX.utils.sheet_to_row_object_array(workbook.Sheets[firstSheet]);

        //Create a HTML Table element.
        var table = document.createElement("table");
        table.setAttribute('class', 'table');
        table.setAttribute('class', 'table-bordered');
        table.setAttribute('style', 'width:100%');
        table.border = "1";

        //Add the header row.
        var row = table.insertRow(-1);

        //Add the header cells.
        var headerCell = document.createElement("th");
        headerCell.innerHTML = "Sr";
        row.appendChild(headerCell);

        var headerCell = document.createElement("th");
        headerCell.innerHTML = "ApplicationNo";
        row.appendChild(headerCell);

        var headerCell = document.createElement("th");
        headerCell.innerHTML = "Floor";
        row.appendChild(headerCell);

        headerCell = document.createElement("th");
        headerCell.innerHTML = "Type";
        row.appendChild(headerCell);

        headerCell = document.createElement("th");
        headerCell.innerHTML = "Area";
        row.appendChild(headerCell);

        headerCell = document.createElement("th");
        headerCell.innerHTML = "Location";
        row.appendChild(headerCell);

        headerCell = document.createElement("th");
        headerCell.innerHTML = "Rate";
        row.appendChild(headerCell);

        //Add the data rows from Excel file.
        for (var i = 0; i < excelRows.length; i++) {
            //Add the data row.
            var row = table.insertRow(-1);

            //Add the data cells.
            var cell = row.insertCell(-1);
            cell.innerHTML = (excelRows[i].Sr == "") ? "-" : excelRows[i].Sr;

            cell = row.insertCell(-1);
            cell.innerHTML = (excelRows[i].ApplicationNo == undefined) ? "-" : excelRows[i].ApplicationNo;

            cell = row.insertCell(-1);
            cell.innerHTML = (excelRows[i].Floor == undefined) ? "-" : excelRows[i].Floor;

            cell = row.insertCell(-1);
            cell.innerHTML = (excelRows[i].Type == undefined) ? "-" : excelRows[i].Type;

            cell = row.insertCell(-1);
            cell.innerHTML = (excelRows[i].Area == undefined) ? "-" : excelRows[i].Area;

            cell = row.insertCell(-1);
            cell.innerHTML = (excelRows[i].Location == undefined) ? "-" : excelRows[i].Location;

            cell = row.insertCell(-1);
            cell.innerHTML = (excelRows[i].Rate == undefined) ? "-" : excelRows[i].Rate;
        }

        var dvExcel = document.getElementById("dvExcel");
        dvExcel.innerHTML = "";
        dvExcel.appendChild(table);
    };
    //
</script>
<input type="file" id="fileUpload" />
<input type="button" class="btn btn-info" id="upload" value="Load Excel File" onclick="Upload()" />
<a class="btn btn-success" href="/images/Sample_Inventory_File.xlsx" rel="nofollow">Download Sample Excel File Here</a>
<hr />
<div id="dvExcel"></div>

<script>
    $('.modal-footer').append('<button class="btn btn-primary" id="up-inv-sa-prem" >Upload Inventory</button>');
    $(".modal-header").text("Upload Inventory");
</script>
