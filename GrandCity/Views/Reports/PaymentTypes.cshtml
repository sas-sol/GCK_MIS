@model IEnumerable<MeherEstateDevelopers.Models.PaymentTypes_Report>
<div id="paymentcontainer" style="min-width: 310px; height: 400px; max-width: 600px; margin: 0 auto"></div>
@{ 
    decimal amount = Model.Sum(x => x.y.Value);
}
<script>
    var colors = Highcharts.getOptions().colors,
        categories = [
            'Cash',
            'Cheque',
            'Online'
        ],
        data = @Html.Raw(Json.Encode(Model)),
        browserData = [],
        versionsData = [],
        i,
        j,
        dataLen = data.length,
        drillDataLen,
        brightness;


    // Build the data arrays
    for (i = 0; i < dataLen; i += 1) {

        // add browser data
        browserData.push({
            name: categories[i],
            y: data[i].y,
            color: data[i].color
        });

        // add version data
        drillDataLen = data[i].drilldown.data.length;
        for (j = 0; j < drillDataLen; j += 1) {
            brightness = 0.2 - (j / drillDataLen) / 5;
            versionsData.push({
                name: data[i].drilldown.categories[j],
                y: data[i].drilldown.data[j],
                color: Highcharts.Color(data[i].color).brighten(brightness).get()
            });
        }
    }

    // Create the chart
    Highcharts.chart('paymentcontainer', {
        chart: {
            type: 'pie'
        },
        title: {
            text: 'Revenue Report'
        },
        subtitle: {
            text: 'Total Revenue : @string.Format("{0:n0}", amount)' 
        },
        plotOptions: {
            pie: {
                shadow: false,
                center: ['50%', '50%']
            }
        },
        tooltip: {
            valuePrefix: 'Rs '
        },
        series: [{
            name: 'Total',
            data: browserData,
            size: '60%',
            dataLabels: {
                formatter: function () {
                    return this.y > 5 ? this.point.name : null;
                },
                color: '#ffffff',
                distance: -30
            }
        }, {
            name: 'Total',
            data: versionsData,
            size: '80%',
            innerSize: '60%',
            dataLabels: {
                formatter: function () {
                    // display only if larger than 1
                    return this.y > 1 ? '<b>' + this.point.name + ':</b> ' +
                        'Rs ' + Number(this.y).toLocaleString() : null;
                }
            },
            id: 'versions'
        }],
        responsive: {
            rules: [{
                condition: {
                    maxWidth: 400
                },
                chartOptions: {
                    series: [{
                        id: 'versions',
                        dataLabels: {
                            enabled: false
                        }
                    }]
                }
            }]
        }
    });

</script>