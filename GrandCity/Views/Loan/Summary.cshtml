@model IEnumerable<MeherEstateDevelopers.Models.Sp_Get_LoanSummary_Result>


<h4 class="c-grey-900 mB-20">Loan Advance Summary</h4>
<table id="loan-list" class="table table-striped table-bordered asset-dat" cellspacing="0" width="100%">
    <thead class="thead-dark">
        <tr>
            <th>Sr.</th>
            <th>Name</th>
            <th>Type</th>
            <th>Applied Date</th>
            <th>Total Amount</th>
            <th>Paid  Amount</th>
            <th>No. Of Installments</th>
            <th>Status</th>
        </tr>
    </thead>
    <tbody>
        @{
            foreach (var item in Model.GroupBy(x => new { x.Loantype }))
            {
                int sr1 = 1;
                foreach (var g in item)
                {
                    decimal inst = (g.paid / (g.TotalAmount / g.Installments)) ?? 0;

                    <tr class="">
                        <td>@sr1</td>
                        <td>@g.Ename</td>
                        <td>@g.Loantype</td>
                        <td>@g.Datea.Value.ToShortDateString()</td>
                        <td>@String.Format("{0:n0}", g.TotalAmount)</td>
                        <td>@String.Format("{0:n0}", g.paid)</td>
                        <td>@Math.Round(inst)  / @g.Installments </td>
                        @if (g.TotalAmount != g.paid)
                        {
                            <td>
                                Pending
                            </td>
                        }
                        else
                        {
                            <td>
                                Paid
                            </td>
                        }


                    </tr>
                    sr1++;
                }
            }
        }
    </tbody>
</table>


<script>
    $(document).ready(function () {
        var groupColumn = 2;
        var table = $('#loan-list').DataTable({
            dom: 'Bfrtip',
            buttons: [
                'copy', 'csv', 'excel', 'pdf', 'print'
            ],
            "columnDefs": [
                { "visible": false, "targets": groupColumn }
            ],
            "order": [[groupColumn, 'asc']],
            "displayLength": 25,
            "drawCallback": function (settings) {
                var api = this.api();
                var rows = api.rows({ page: 'current' }).nodes();
                var last = null;

                api.column(groupColumn, { page: 'current' }).data().each(function (group, i) {
                    if (last !== group) {
                        $(rows).eq(i).before(
                            '<tr class="group" style="text-align: center;"><th colspan="11">' +  group.replace('_',' ') + '</th></tr>'
                        );

                        last = group;
                    }
                });
            }
        });
        // Order by the grouping
        $('#example tbody').on('click', 'tr.group', function () {
            var currentOrder = table.order()[0];
            if (currentOrder[0] === groupColumn && currentOrder[1] === 'asc') {
                table.order([groupColumn, 'desc']).draw();
            }
            else {
                table.order([groupColumn, 'asc']).draw();
            }
        });
    });
</script>
<style>
    tr.group,
    tr.group:hover {
        background-color: #ddd !important;
    }
</style>