@model IEnumerable<MeherEstateDevelopers.Models.Sp_Get_Payable_ArchiveOrReceivable_Result>

<style>
    table thead tr th, table tbody tr td {
        font-size: 12px;
    }
</style>
<h4 class="c-grey-900 mB-20">@ViewBag.status</h4>
<table id="loan-list" class="table table-striped table-bordered asset-dat" cellspacing="0" width="100%">
    <thead class="thead-dark">
        <tr>
            <th>Sr.</th>
            <th>Name</th>
            <th>Type</th>
            <th>Amount</th>
            <th>Applied Date</th>
            <th>Installments</th>
            <th>Paid</th>
            <th>Remaining</th>

        </tr>
    </thead>
    <tbody>
        @{
            int sr = 1;
            foreach (var item in Model.GroupBy(x => new { x.Type }))
            {

                foreach (var g in item)
                {
                    var rem = g.Amount - g.Loan_Paid;
                    string col = "";
                    if (rem < 0)
                    {
                        col = "bgc-green-50";
                    }
                    <tr class="@col">
                        <td>@sr</td>
                        <td>@g.Name</td>
                        <td>@g.Type</td>
                        <td>@String.Format("{0:n0}", g.Amount)</td>
                        <td>@g.CreatedAt.Value.ToShortDateString()</td>
                        <td>@g.Installments</td>
                        <td>@String.Format("{0:n0}", g.Loan_Paid)</td>
                        <td>@String.Format("{0:n0}", rem)</td>

                    </tr>
                    sr++;
                }


            }
        }
    </tbody>
</table>




<script>
    $(document).ready(function () {
        var groupColumn = 2;
        var table = $('#loan-list').DataTable({
            dom: 'Bfrtip',
            buttons: [
                'copy', 'csv', 'excel', 'pdf', 'print'
            ],
            "columnDefs": [
                { "visible": false, "targets": groupColumn }
            ],
            "order": [[groupColumn, 'asc']],
            "displayLength": 25,
            "drawCallback": function (settings) {
                var api = this.api();
                var rows = api.rows({ page: 'current' }).nodes();
                var last = null;

                api.column(groupColumn, { page: 'current' }).data().each(function (group, i) {
                    if (last !== group) {
                        $(rows).eq(i).before(
                            '<tr class="group" style="text-align: center;"><th colspan="11">' + group.replace('_',' ') + '</th></tr>'
                        );

                        last = group;
                    }
                });
            }
        });
        // Order by the grouping
        $('#example tbody').on('click', 'tr.group', function () {
            var currentOrder = table.order()[0];
            if (currentOrder[0] === groupColumn && currentOrder[1] === 'asc') {
                table.order([groupColumn, 'desc']).draw();
            }
            else {
                table.order([groupColumn, 'asc']).draw();
            }
        });
    });
</script>
<style>
    tr.group,
    tr.group:hover {
        background-color: #ddd !important;
    }
</style>


