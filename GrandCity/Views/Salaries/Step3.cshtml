@*@model MeherEstateDevelopers.Models.SalaryStep3Model*@
@model IEnumerable<MeherEstateDevelopers.Models.Sp_Get_All_Employess_Salaries_Result>
@*@{ Layout = "~/Views/Shared/_StaffLayout.cshtml"; }*@
<style>
    table thead tr th, table tbody tr td {
        font-size: 12px;
    }

    .highlighxt {
        background: red;
    }

    .testbg {
        border: 3px solid red;
    }

    .secondclass {
        -moz-transition: all 1s ease-in;
        -webkit-transition: all 1s ease-in;
        -o-transition: all 1s ease-in;
        transition: all 1s ease-in;
        border: none;
    }

    .scrolling-box {
        height: 740px;
        overflow-y: scroll;
        overflow-x: scroll;
        width: 100%;
    }

    #kdj {
        position: fixed;
        top: 0px;
        display: none;
        background-color: white;
    }

    .tableFixHead {
        overflow: auto;
        height: 550px;
    }

        .tableFixHead .ka th {
            position: sticky;
            top: 0;
        }
</style>
<div class="bgc-white bdrs-3 loadlogo  mB-20">
    <div class="col-md-12">
        @if (Model.Any())
        {
            <h3 class="c-grey-900 mB-20" style="text-align:center">Salaries for Month @string.Format("{0: MMMM yyyy}", Model.Select(x => x.Salary_Month).FirstOrDefault().Value)</h3>
        }
        else
        {
            <h3 class="c-grey-900 mB-20" style="text-align:center">Salaries for Month @string.Format("{0: MMMM yyyy}", DateTime.Now)</h3>
        }
    </div>
    
    <div class="form-row">
        @if (Model.Any())
        {
            <div class="col-md-9 form-row">
                <button type="submit" id="btnextrafuel" class="btn btn-primary pointer">Add Extra Fuel Charges</button>
                <button type="submit" id="btntaxesauto" class="btn btn-primary pointer mr-md-3 ml-md-3">Merge Taxes</button>
                <button class="btn btn-dark pointer btn_add_emp_bank mr-md-3 ml-md-3" data-target="#Modal" data-toggle="modal">Add Bank Details</button>
                <button class="btn btn-success finc-fin-sal">Finalize Salaries</button>
            </div>
            <div class="col-md-3">
                <input type="text" class="form-control emp-srch-sal-dfjkh" placeholder="Search Employee" />
            </div>

        }
    </div>
    <hr />
    <div class="tableFixHead">
        <table id="salary-dat" class="table table-striped table-bordered " cellspacing="0" width="100%">
            <thead class="thead-dark ka">
                <tr style="white-space:nowrap;">
                    <th>Sr</th>
                    <th>Code</th>
                    <th>Name</th>
                    <th>Designation</th>
                    @*<th>Previous Basic Salary</th>*@
                    @*<th>COLA</th>*@
                    <th>Basic Salary</th>
                    <th>Stipend</th>
                    <th>Per Day Wage</th>
                    <th>Date Of Joining</th>
                    <th>No Of Days</th>
                    <th>Absentee</th>
                    <th>Leaves</th>
                    <th>Extra Days</th>
                    <th>No Of Worked Days</th>
                    <th>Allowances/Arears</th>
                    <th>Extra Days Wage</th>
                    <th>Bonus Description</th>
                    <th>Bonus</th>
                    <th>Absentee Deduction</th>
                    <th>Loan</th>
                    <th>Advance</th>
                    <th>Fuel Deduction</th>
                    <th>Tax Deduction</th>
                    <th>Other Deduction</th>
                    <th>Net Payable</th>
                    <th>Cash</th>
                    <th>Bank</th>
                    <th>Actions</th>
                </tr>
            </thead>
            @{
                if (Model.Any())
                {
                    foreach (var g in Model.GroupBy(x => new { x.DepartmentName, x.DepartmentId }))
                    {
                        long? g_dep = (g.Key.DepartmentId is null) ? 0 : g.Key.DepartmentId;
                        int sr = 1;
                        <thead class="">
                            <tr class="nofilter">
                                <th colspan="31" style="font-size:21px;" class="pointer depts-toggler" data-tog="@((g.Key.DepartmentId is null)?"sps":"dept"+g.Key.DepartmentId.ToString())">
                                    @((string.IsNullOrWhiteSpace(g.Key.DepartmentName))?"No Department":g.Key.DepartmentName) <i class="fa fa-arrow-circle-o-down hjjhjh" title="Click To Expand"></i>
                                    &nbsp;&nbsp;&nbsp;&nbsp;<span style="font-size:10px;" class="hjjhjh">Total Employees : @g.Count()</span>
                                    &nbsp;&nbsp;&nbsp;&nbsp;<span style="font-size:10px;" class="hjjhjh">Total Basic Salary : @string.Format("{0:n0}", g.Sum(x => x.Basic_salary))</span>
                                    &nbsp;&nbsp;&nbsp;&nbsp;<span style="font-size:10px;" class="hjjhjh">Total Stipend : @string.Format("{0:n0}", g.Sum(x => x.Stipend))</span>
                                    &nbsp;&nbsp;&nbsp;&nbsp;<span style="font-size:10px;" class="hjjhjh">Total Absentee Deductions : @string.Format("{0:n0}", g.Sum(x => x.Ded_Absentee))</span>
                                    &nbsp;&nbsp;&nbsp;&nbsp;<span style="font-size:10px;" class="hjjhjh">Total Extra Days Amount : @string.Format("{0:n0}", g.Sum(x => x.Extra_Working_Days))</span>
                                    &nbsp;&nbsp;&nbsp;&nbsp;<span style="font-size:10px;" class="hjjhjh">Total Fuel Amount : @string.Format("{0:n0}", g.Sum(x => x.Extra_Fuel_Charges))</span>
                                    &nbsp;&nbsp;&nbsp;&nbsp;<span style="font-size:10px;" class="hjjhjh">Total Allowances/Arrears : @string.Format("{0:n0}", g.Sum(x => x.Allownces))</span>
                                    &nbsp;&nbsp;&nbsp;&nbsp;<span style="font-size:10px;" class="hjjhjh">Total Bonus : @string.Format("{0:n0}", g.Sum(x => x.Bonus))</span>
                                    &nbsp;&nbsp;&nbsp;&nbsp;<span style="font-size:10px;" class="hjjhjh">Net Payable : @string.Format("{0:n0}", g.Sum(x => x.Grand_total))</span>
                                    &nbsp;&nbsp;&nbsp;&nbsp;<span style="font-size:10px;" class="hjjhjh">Total Bank : @string.Format("{0:n0}", g.Sum(x => x.Cash))</span>
                                    &nbsp;&nbsp;&nbsp;&nbsp;<span style="font-size:10px;" class="hjjhjh">Total Cash : @string.Format("{0:n0}", g.Sum(x => x.Bank))</span>
                                </th>
                            </tr>
                        </thead>
                        <tbody class="@((g.Key.DepartmentId is null)?"sps":"dept"+g.Key.DepartmentId.ToString())" style="display:none;">
                            @foreach (var item in g)
                            {
                                long? dep = (item.DepartmentId is null) ? 0 : item.DepartmentId;

                                <tr class="fin-up-rec nofilter" id="@item.Id">
                                    <td>@sr</td>
                                    <td>@item.Employee_code</td>
                                    <td>@item.Employee_Name</td>
                                    <td>@item.Designation_name</td>
                                    @*<td>@String.Format("{0:n0}", Math.Round(Convert.ToDecimal(item.Previous_Basic_Salary)))</td>*@
                                    @*<td>@String.Format("{0:n0}", Math.Round(Convert.ToDecimal(item.COLA_Amount)))</td>*@
                                    <td class="basic_salary @dep-basicSalary @g_dep-basic_salary" id="@dep">@String.Format("{0:n0}", Math.Round(Convert.ToDecimal(item.Basic_salary)))</td>
                                    <td class="Stipend @dep-Stipend @g_dep-Stipend" id="@dep">@String.Format("{0:n0}", Math.Round(Convert.ToDecimal(item.Stipend)))</td>
                                    <td class="">@( Math.Round(Convert.ToDecimal(item.Basic_salary / 30)) )</td>
                                    <td style="font-weight:bold">@string.Format("{0: dd-MMM-yyyy}", item.Emp_Date_Of_Joining)</td>
                                    <td>@item.No_Of_Days</td>
                                    <td>@item.Absentee</td>
                                    <td>@item.Salary_Leaves</td>
                                    <td>@item.Extra_Working_Days</td>
                                    <td class="absen-cal-days">@(item.No_Of_Days - item.Absentee + item.Extra_Working_Days )</td>
                                    <td class="t_allownce all_calc @dep-8" id="@dep"> @String.Format("{0:n0}", Math.Round(Convert.ToDecimal(item.Allownces))) </td>
                                    <td class="extra_work @dep-Ewd" id="@dep"> @String.Format("{0:n0}", Math.Round(Convert.ToDecimal(item.Basic_salary / 30 * item.Extra_Working_Days))) </td>
                                    <td>@item.Bonus_Description</td>
                                    <td class="bonus @dep-bon" id="@dep">@string.Format("{0:n0}", Math.Round(Convert.ToDecimal(item.Bonus)))</td>
                                    <td class="absn-cal @dep" id="@dep">@String.Format("{0:n0}", Math.Round(Convert.ToDecimal(item.Ded_Absentee)))</td>
                                    <td><span>@String.Format("{0:n0}", Math.Round(Convert.ToDouble(item.Ded_Loan)))</span></td>
                                    <td><span>@String.Format("{0:n0}", Math.Round(Convert.ToDouble(item.Ded_Advance)))</span></td>
                                    <td>@String.Format("{0:n0}", Math.Round(Convert.ToDouble(item.Extra_Fuel_Charges)))</td>
                                    <td class="tax-calc @dep-5" id="@dep">
                                        @*<input type="text" class="" placeholder="" value="@(item.Ded_Tax*(-1))" style="width:100px;" />*@
                                        <input class="form-control coma  Tax-deduc" value="@String.Format("{0:n0}",Math.Round(Convert.ToDecimal( item.Ded_Tax)))" style="width:100px;font:bold;">
                                    </td>
                                    <td data-toggle="modal" data-target="#Modal" class="@dep-45 ti-pencil Salary_details fin-dedc" id="@item.DepartmentName"> @String.Format("{0:n0}", Math.Round(Convert.ToDouble(item.Ded_Other))) </td>
                                    <td class="GrndTot @dep-2" id="@Math.Round(Convert.ToDecimal(item.Grand_total), 0, MidpointRounding.AwayFromZero)" style="font:bold"> @String.Format("{0:n0}", Math.Round(Convert.ToDecimal(item.Grand_total), 0, MidpointRounding.AwayFromZero))</td>
                                    <td>
                                        @*<input type="text" class="sal-cashbank cash" placeholder="" id="Cash" value="@String.Format("{0:n0}",Math.Round(Convert.ToDecimal( item.Cash)))" style="width:60px;" />*@
                                        <input class="form-control coma  sal-cashbank cash @dep-57" id="Cash" value="@String.Format("{0:n0}", Math.Round(Convert.ToDecimal(item.Cash), 0, MidpointRounding.AwayFromZero))" style="width:100px;font:bold;">
                                    </td>
                                    <td>
                                        @*<input type="text" class="sal-cashbank bank" placeholder="" id="Bank" value=" @String.Format("{0:n0}", Math.Round(Convert.ToDecimal(item.Bank)))" style="width:60px;" />*@
                                        <input class="form-control coma  sal-cashbank bank @dep-56" id="Bank" value="@String.Format("{0:n0}",Math.Round(Convert.ToDecimal( item.Bank)))" style="width:100px;font:bold;">
                                    </td>
                                    <td>
                                        <ul style="list-style:none;margin-left:0px;">
                                            <li class="dropdown">
                                                <a href="" class="dropdown-toggle no-after peers " data-toggle="dropdown">
                                                    <i class="ti-more-alt  c-grey-900" style="transform:rotate(90deg);"></i>
                                                </a>
                                                <ul class="dropdown-menu">
                                                    <li><a id="Step_2" data-id="@item.Id" class="pointer reverse_salary"><span>Reverse</span></a></li>
                                                </ul>
                                            </li>
                                        </ul>
                                    </td>
                                </tr>
                                sr++;
                            }
                            <tr class="" id="@g.Key.DepartmentName nofilter">
                                <td style="font-size:20px" colspan="4">Gross Total</td>
                                @*<td>@String.Format("{0:n0}", Math.Round(Convert.ToDecimal(g.Select(x => x.Previous_Basic_Salary).Sum())))</td>*@
                                @*<td>@String.Format("{0:n0}", Math.Round(Convert.ToDecimal(g.Select(x => x.COLA_Amount).Sum())))</td>*@
                                <td class="@g_dep-basic_salarygr">@String.Format("{0:n0}", Math.Round(Convert.ToDecimal(g.Select(x => x.Basic_salary).Sum())))</td>
                                <td class="@g_dep-Stipendgr">@String.Format("{0:n0}", Math.Round(Convert.ToDecimal(g.Select(x => x.Stipend).Sum())))</td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td id="totl_allownce" class="@g.Key.DepartmentId-9">@String.Format("{0:n0}", Math.Round(Convert.ToDecimal(g.Select(x => x.Allownces).Sum()))) </td>
                                <td class="@g_dep-1Ewd">@String.Format("{0:n0}", Math.Round(Convert.ToDecimal(g.Select(x => x.Basic_salary / 30 * x.Extra_Working_Days).Sum())))</td>
                                <td></td>
                                <td class="@g_dep-1depBo">@String.Format("{0:n0}", Math.Round(Convert.ToDecimal(g.Select(x => x.Bonus).Sum())))</td>
                                <td class=" @g_dep-1">@String.Format("{0:n0}", Math.Round(Convert.ToDecimal(g.Select(x => x.Ded_Absentee).Sum()))) </td>
                                <td>@String.Format("{0:n0}", Math.Round(Convert.ToDecimal(g.Select(x => x.Ded_Loan).Sum())))</td>
                                <td>@String.Format("{0:n0}", Math.Round(Convert.ToDecimal(g.Select(x => x.Ded_Advance).Sum())))</td>
                                <td>@String.Format("{0:n0}", Math.Round(Convert.ToDecimal(g.Select(x => x.Extra_Fuel_Charges).Sum())))</td>
                                <td class="@g_dep-15">@String.Format("{0:n0}", Math.Round(Convert.ToDecimal(g.Select(x => x.Ded_Tax).Sum())))</td>
                                <td class="@g_dep-450">@String.Format("{0:n0}", Math.Round(Convert.ToDecimal(g.Select(x => x.Ded_Other).Sum())))</td>
                                <td class="@g_dep-22">@String.Format("{0:n0}", Math.Round(Convert.ToDecimal(g.Select(x => Math.Round(Convert.ToDecimal(x.Grand_total))).Sum())))</td>
                                <td class="@g_dep-1540">@String.Format("{0:n0}", Math.Round(Convert.ToDecimal(g.Select(x => x.Cash).Sum())))</td>
                                <td class="@g_dep-1541">@String.Format("{0:n0}", Math.Round(Convert.ToDecimal(g.Select(x => x.Bank).Sum())))</td>
                                <td></td>
                            </tr>
                        </tbody>
                    }
                    <tfoot>
                        <tr class="nofilter">
                            <td style="font-size:20px" colspan="4">Grand Total</td>
                            @*<td>@String.Format("{0:n0}", Math.Round(Convert.ToDecimal(Model.Select(x => x.Previous_Basic_Salary).Sum())))</td>*@
                            @*<td>@String.Format("{0:n0}", Math.Round(Convert.ToDecimal(Model.Select(x => x.COLA_Amount).Sum())))</td>*@
                            <td class="total_basic_salary">@String.Format("{0:n0}", Math.Round(Convert.ToDecimal(Model.Select(x => x.Basic_salary).Sum())))</td>
                            <td class="total_Stipend">@String.Format("{0:n0}", Math.Round(Convert.ToDecimal(Model.Select(x => x.Stipend).Sum())))</td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td class="total_allownces">@String.Format("{0:n0}", Math.Round(Convert.ToDecimal(Model.Sum(x => x.Allownces))))</td>
                            <td class="total_extra_wage">@String.Format("{0:n0}", Math.Round(Convert.ToDecimal(Model.Sum(x => x.Basic_salary / 30 * x.Extra_Working_Days))))</td>
                            <td></td>
                            <td class="total_bonus">@String.Format("{0:n0}", Math.Round(Convert.ToDecimal(Model.Sum(x => x.Bonus))))</td>
                            <td class="footer_ded_absen">@String.Format("{0:n0}", Math.Round(Convert.ToDecimal(Model.Sum(x => x.Ded_Absentee))))</td>
                            <td>@String.Format("{0:n0}", Math.Round(Convert.ToDecimal(Model.Select(x => x.Ded_Loan).Sum())))</td>
                            <td>@String.Format("{0:n0}", Math.Round(Convert.ToDecimal(Model.Select(x => x.Ded_Advance).Sum())))</td>
                            <td>@String.Format("{0:n0}", Math.Round(Convert.ToDecimal(Model.Select(x => x.Extra_Fuel_Charges).Sum())))</td>
                            <td class="footer_ded_Tax">@String.Format("{0:n0}", Math.Round(Convert.ToDecimal(Model.Sum(x => x.Ded_Tax))))</td>
                            <td class="footer_othr_ded">@String.Format("{0:n0}", Math.Round(Convert.ToDecimal(Model.Sum(x => x.Ded_Other))))</td>
                            <td class="NetPaysum">@String.Format("{0:n0}", Math.Round(Convert.ToDecimal(Model.Sum(x => Math.Round(Convert.ToDecimal(x.Grand_total))))))</td>
                            <td class="cash_calcu">@String.Format("{0:n0}", Math.Round(Convert.ToDecimal(Model.Select(x => x.Cash).Sum())))</td>
                            <td class="bank_calcu">@String.Format("{0:n0}", Math.Round(Convert.ToDecimal(Model.Select(x => x.Bank).Sum())))</td>
                            <td></td>
                        </tr>
                    </tfoot>
                }
                else
                {
                    <tfoot>
                        <tr>
                            <td colspan="22">No Record Exists</td>
                        </tr>
                    </tfoot>
                }
            }
        </table>
    </div>
</div>
<style>
    tr.group,
    tr.group:hover {
        background-color: #ddd !important;
    }

    tr .hjjhjh {
        visibility: hidden;
    }

    tr:hover .hjjhjh {
        visibility: visible;
    }
</style>

<script>
    $(document).ready(function () {
        $('.depts-toggler').unbind().click(function () {
            let togId = $(this).attr('data-tog');
            $('.' + togId).slideToggle();
            let arrow = $(this).parent().find('.hjjhjh');
            if ($(arrow).hasClass('fa-arrow-circle-o-down')) {
                $(arrow).removeClass('fa-arrow-circle-o-down');
                $(arrow).addClass('fa-arrow-circle-o-up');
            }
            else {
                $(arrow).removeClass('fa-arrow-circle-o-up');
                $(arrow).addClass('fa-arrow-circle-o-down');
            }
        });

        $(".emp-srch-sal-dfjkh").on("keyup", function () {
            var value = $(this).val().toLowerCase();
            $("#salary-dat .nofilter").filter(function () {
                $(this).toggle($(this).text().toLowerCase().indexOf(value) > -1)
                if ($(this).text().toLowerCase().indexOf(value) > -1) {
                    $(this).closest('tbody').show();
                }
            });
            if (value == '') {
                $('tbody').hide();
            }
        });
    });
    $('.bank').change(function () {
        var cash = RemoveComma($(this).closest('tr').find('.cash').val());
        var bank = RemoveComma($(this).closest('tr').find('.bank').val());
        var net = RemoveComma($(this).closest('tr').find('.GrndTot').attr('id'));
        var change = net - bank;
        if (change < 0) {
            alert("Salary cannot be more than the Net Amount");
            $(this).closest('tr').find('.cash').val(0);
            $(this).closest('tr').find('.bank').val(net.toLocaleString());
        }
        else {
            $(this).closest('tr').find('.cash').val(change.toLocaleString());
        }
    });
    $('.cash').change(function () {
        var cash = RemoveComma($(this).closest('tr').find('.cash').val());
        var bank = RemoveComma($(this).closest('tr').find('.bank').val());
        var net = RemoveComma($(this).closest('tr').find('.GrndTot').attr('id'));
        var change = net - cash;
        if (change < 0) {
            alert("Salary cannot be more than the Net Amount");
            $(this).closest('tr').find('.bank').val(0);
            $(this).closest('tr').find('.cash').val(net.toLocaleString());
        }
        else {
            $(this).closest('tr').find('.bank').val(change.toLocaleString());
        }
        
    });
    $('.bank-name').change(function () {
        var classname = $(this).closest('tr').hasClass('bankchange');
        if (!classname) {
            $(this).closest('tr').addClass('bankchange');
        }
    });
    $('.instNo').change(function () {
        var classname = $(this).closest('tr').hasClass('bankchange');
        if (!classname) {
            $(this).closest('tr').addClass('bankchange');
        }
    });
    $('.purchaseDate').change(function () {
        var classname = $(this).closest('tr').hasClass('bankchange');
        if (!classname) {
            $(this).closest('tr').addClass('bankchange');
        }
    });
    $('#btntaxesauto').unbind().click(function () {
        let confi = confirm('Are you sure you want to merge taxes?');

        if (!confi) {
            return;
        }

        $.ajax({
            type: "POST",
            url: '/Salaries/EmbedSalaryTaxes/',
            contentType: "application/json; charset=utf-8",
            data: {},
            success: function (data) {
                if (data != null) {
                    alert(data);
                    alert("Taxes have been added successfully");
                    $('#coahead').load('/Salaries/Step3');
                }
                else {
                    alert("Taxes have been added successfully");
                    $('#coahead').load('/Salaries/Step3');
                }
            },
            error: function (data) {
                alert("Failed to add taxes. Please try again. Post Data Error");
            }
        });
    });
    $(document).on('click', '.btn_add_emp_bank', function () {
        EmptyModel();
        $('#ModalLabel').text("Add Standing Order Details");
        $('#modalbody').load('/Salaries/AddBankAccountDetailsStep3/', function () { });
    });
</script>
