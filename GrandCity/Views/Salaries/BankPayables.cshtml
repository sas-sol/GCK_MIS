@model IEnumerable<MeherEstateDevelopers.Models.Sp_Get_Final_Bank_Salaries_Result>
<div class="form-row">
    <div class="col-md-6">
        <h4>Bank Payable Salaries <span style="float:right">@String.Format("{0: MMMM , yyyy}", Model.Select(x => x.Salary_Month).FirstOrDefault())</span></h4>
    </div>
</div>
<table id="salary-dat" class="table table-striped table-bordered " cellspacing="0" width="100%">
    <thead class="thead-dark">
        <tr>
            <th>Code</th>
            <th>Name</th>
            <th>Department</th>
            <th>CNIC</th>
            <th>Designation</th>
            <th>Basic Salary</th>
            <th>Allownces & Bonus</th>
            <th>Deductions & Tax</th>
            <th>Gross Salary</th>
            <th>View</th>
            <th>Print</th>
        </tr>
    </thead>
    <tbody>
        @{
            foreach (var item in Model)
            {
                <tr class="" id="@item.Id">
                    <td>@item.Employee_code</td>
                    <td>@item.Employee_Name</td>
                    <td>@item.DepartmentName</td>
                    <td>@item.CNIC</td>
                    <td>@item.Designation_name</td>
                    <td class="s-read">@String.Format("{0:n0}", item.Basic_salary)</td>
                    <td class="t_allownce"> @String.Format("{0:n0}", (item.Allownces) + (item.Bonus) + ((item.Basic_salary / 100) * (item.Extra_Working_Days)) + (item.Overtime))</td>
                    <td class="">@String.Format("{0:n0}", (item.Ded_Other) + (item.Ded_Tax) + (item.Ded_Absentee) + (item.Extra_Fuel_Charges)@*- ((item.Basic_salary / 30) * item.Salary_Leaves)*@)</td>
                    <td class="GrndTot" style="font:bold"> @String.Format("{0:n0}", item.Grand_total)</td>
                    <td><i class="ti-eye view-salary pointer" id="@item.Id"></i></td>
                    <td class="col-mod"><button class="btn btn-primary gen_salaris" data-bank="@item.Bank" id="@item.Id" value="Gen">Gen Slip</button></td>
                </tr>
            }
        }
    </tbody>
    <tfoot>
        <tr>
            <td align="center" class="col-mod"></td>
            <td align="center" class="col-mod"></td>
            <td align="center" class="col-mod"></td>
            <td align="center" class="col-mod"></td>
            <td align="center" class="col-mod"></td>
            <td align="center" class="col-mod">@String.Format("{0:n0}", Model.Sum(x => x.Basic_salary))</td>
            <td align="center" class="col-mod">@String.Format("{0:n0}", Model.Sum(x => x.Allownces + x.Bonus + x.Overtime + (x.Basic_salary / 100 * x.Extra_Working_Days)))</td>
            <td align="center" class="col-mod">@String.Format("{0:n0}", Model.Sum(x => (x.Ded_Other + x.Ded_Tax + x.Ded_Absentee + x.Extra_Fuel_Charges)@*-((x.Basic_salary / 30) * (x.Absentee))*@))</td>
            <td align="center" class="col-mod">@String.Format("{0:n0}", Model.Sum(x => x.Grand_total))</td>
            <td align="center" class="col-mod"></td>
        </tr>
    </tfoot>
</table>


<script>
    $(document).ready(function () {
        var groupColumn = 2;
        var table = $('#salary-dat').DataTable({
            dom: 'Bfrtip',
            buttons: [
                'copy', 'csv', 'excel', 'pdf', 'print'
            ],
            "columnDefs": [
                { "visible": false, "targets": groupColumn }
            ],
            "order": [[groupColumn, 'asc']],
            "displayLength": 25,
            "drawCallback": function (settings) {
                var api = this.api();
                var rows = api.rows({ page: 'current' }).nodes();
                var last = null;

                api.column(groupColumn, { page: 'current' }).data().each(function (group, i) {
                    if (last !== group) {
                        $(rows).eq(i).before(
                            '<tr class="group"><th colspan="11">' + group + '</th></tr>'
                        );

                        last = group;
                    }
                });
            }
        });
        // Order by the grouping
        $('#example tbody').on('click', 'tr.group', function () {
            var currentOrder = table.order()[0];
            if (currentOrder[0] === groupColumn && currentOrder[1] === 'asc') {
                table.order([groupColumn, 'desc']).draw();
            }
            else {
                table.order([groupColumn, 'asc']).draw();
            }
        });
    });
</script>
<style>
    tr.group,
    tr.group:hover {
        background-color: #ddd !important;
    }
</style>